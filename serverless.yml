org: bodiddlie
app: pile-of-shame-focus-app
service: pile-of-shame-focus

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

custom:
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  environment:
    TABLE_NAME: ${self:service}-${self:custom.stage}
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - ses:SendEmail
      Resource:
        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}'
        - 'arn:aws:ses:${opt:region, self:provider.region}:*:*'

functions:
  sign-up:
    handler: auth/signup.signup
    environment:
      SECRET_KEY: ${ssm:/focus-encryption-key~true}
    events:
      - http:
          path: signup
          method: post
          cors: true

  login:
    handler: auth/login.login
    environment:
      SECRET_KEY: ${ssm:/focus-encryption-key~true}
      JWT_SECRET: ${ssm:/focus-jwt-key~true}
    events:
      - http:
          path: login
          method: post
          cors: true

  add-game:
    handler: game/add.add
    events:
      - http:
          path: games
          method: post
          cors: true

  search-game:
    handler: game/search.search
    environment:
      GB_URL: 'https://giantbomb.com/api/games'
      GB_API_KEY: ${ssm:/focus-gb-key~true}
    events:
      - http:
          path: search
          method: get
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  - ${file(resources/gateway-errors.yml)}
  - ${file(resources/dynamo.yml)}
